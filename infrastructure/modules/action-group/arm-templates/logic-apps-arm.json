{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workflows_app1_alerts_name": {
            "defaultValue": "app1-alerts",
            "type": "String"
        },
        "connections_azuretables_name": {
            "type": "String"
        },
        "apim_instance_name": {
            "type": "String"
        }
    },
    "variables": {
        "logicAppsName": "[toLower( concat( parameters('workflows_app1_alerts_name'), uniqueString(resourceGroup().id) ) )]",
        "location": "[resourceGroup().location]",
        "tableStorageConnectionId": "[resourceId('Microsoft.Web/connections/', parameters('connections_azuretables_name'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('logicAppsName')]",
            "location":"[variables('location')]",
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "apim_instance_name":{
                            "defaultValue":  "[parameters('apim_instance_name')]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "context": {
                                                    "properties": {
                                                        "condition": {
                                                            "properties": {
                                                                "allOf": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "dimensions": {
                                                                                "items": {
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "metricName": {
                                                                                "type": "string"
                                                                            },
                                                                            "metricValue": {
                                                                                "type": "integer"
                                                                            },
                                                                            "operator": {
                                                                                "type": "string"
                                                                            },
                                                                            "threshold": {
                                                                                "type": "string"
                                                                            },
                                                                            "timeAggregation": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "metricName",
                                                                            "dimensions",
                                                                            "operator",
                                                                            "threshold",
                                                                            "timeAggregation",
                                                                            "metricValue"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "windowSize": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "conditionType": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "portalLink": {
                                                            "type": "string"
                                                        },
                                                        "resourceGroupName": {
                                                            "type": "string"
                                                        },
                                                        "resourceId": {
                                                            "type": "string"
                                                        },
                                                        "resourceName": {
                                                            "type": "string"
                                                        },
                                                        "resourceType": {
                                                            "type": "string"
                                                        },
                                                        "subscriptionId": {
                                                            "type": "string"
                                                        },
                                                        "timestamp": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "properties": {
                                                    "properties": {},
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "type": "string"
                                                },
                                                "version": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "schemaId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Compose": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@triggerBody()"
                        },
                        "Compose_2": {
                            "runAfter": {
                                "Get_entity": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "api": "@{variables('API')}",
                                "metricValue": "@variables('MetricValue')",
                                "tenantEmail": "@body('Get_entity')['DefaultTenantEmail']"
                            }
                        },
                        "For_each": {
                            "foreach": "@triggerBody()?['data']?['alertContext']?['condition']?['allOf']",
                            "actions": {
                                "For_each_2": {
                                    "foreach": "@items('For_each')['dimensions']",
                                    "actions": {
                                        "Condition": {
                                            "actions": {
                                                "Set_variable": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "API",
                                                        "value": "@{items('For_each_2')['value']}"
                                                    }
                                                },
                                                "Set_variable_2": {
                                                    "runAfter": {
                                                        "Set_variable": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "MetricValue",
                                                        "value": "@if(equals(items('For_each')['metricValue'], null),0, items('For_each')['metricValue'])"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@items('For_each_2')['name']",
                                                            "ApiName"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "Compose": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_entity": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/Tables/@{encodeURIComponent('ApimAlertsReferenceData01')}/entities(PartitionKey='@{encodeURIComponent(parameters('apim_instance_name'))}',RowKey='@{encodeURIComponent(variables('API'))}')"
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "MetricValue",
                                        "type": "float"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "API",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                 "parameters": {
                    "$connections": {
                        "value": {
                            "azuretables": {
                                "connectionId": "[variables('tableStorageConnectionId')]",
                                "connectionName": "[parameters('connections_azuretables_name')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', variables('location'),'/managedApis/', 'azuretables')]"
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "logicAppsResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Logic/workflows', variables('logicAppsName'))]"
        },
        "logicAppsCallBackUrl": {
            "type": "string",
            "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppsName')), '/triggers/manual'), '2016-06-01').value]"
        }
    }
}